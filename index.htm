<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
    <style>
        body {
            background: #222;
            color: #fff;
            font-size: 1.2em;
            text-align: center;
        }

        div {
            margin: 15px;
        }

        button,
        input {
            padding: 5px;
            border: none;
            background: #444;
            color: #fff;
            cursor: pointer;
            font-size: 0.8em;
        }
        
        button.stop,
        button.start,
        button.reset {
          padding: 10px;
        }
        button.start {
          background: #080;
        }
        button.stop {
          background: #c22;
        }
        button.reset {
          background: #fd2;
          color: #000;
        }

        input {
            width: 5em;
        }
        
        #currentTime,
        #timeLeft {
          font-size: 2em;
        }
        
    </style>
</head>

<body>
    <!-- sound edited from http://soundbible.com/1787-Annoying-Alarm-Clock.html -->
    <audio id="alarmSound" loop preload="none" onpause="alarmSound.currentTime = 0;" src="data:video/ogg;base64,">
    The browser does not support audio elements with data URIs.
    </audio>

    <div>
        <button onclick='startPresentation()' class="start">
            Start
        </button>
        <button onclick='stopSound()' class="stop">
            Stop sound
        </button>
        <button onclick='reset()' class="reset">
            Reset
        </button>
    </div>
    <div>
        <label>
            Presentation length (min):
            <input id='totalTime' type='number' min='1' step='1' value='5' />
        </label>
    </div>
    <div>
        <label>
            Warning after (min):
            <input id='warningTime' type='number' min='0' step='0.5' value='4' />
        </label>
    </div>
    <div>
        <button onclick='preset(5)'>
            Preset 5 minutes
        </button>
        <button onclick='preset(30)'>
            Preset 30 minutes
        </button>
    </div>
    <div>
        <button onclick='shortPeep()'>
            Test warning
        </button>
        <button onclick='testAlarm()'>
            Test alarm
        </button>
    </div>
    <div>
        Current time:
        <span id='currentTime'>--:--</span>
    </div>
    <div>
        Time left:
        <span id='timeLeft'>--:--</span>
    </div>
</body>
<script>
    const warningVolume = 0.5;
    const warningFreq = 1050;
    let osc = null;
    let osc2 = null;
    let gain = null;
    
    let startTime;
    let totalTime;
    
    let clockTimer;
    let warningTimer;
    let alarmTimer;
    let testAlarmTimer;
    
    const alarmSoundElement = document.getElementById("alarmSound");
    const totalTimeElement = document.getElementById('totalTime');
    const warningTimeElement = document.getElementById('warningTime');
    const currentTimeElement = document.getElementById("currentTime");
    const timeLeftElement = document.getElementById("timeLeft");
    
    let isPresentationRunning = false;

    function startAlarm() {
        alarmSoundElement.play();
    };

    function testAlarm() {
        if (!alarmSoundElement.paused)
          return;
          
        alarmSoundElement.play();
        testAlarmTimer = setTimeout(() => alarmSoundElement.pause(), 4000);
    };

    function shortPeep() {
        if (osc !== null)
          return;

        const audio = new AudioContext();
        
        gain = audio.createGain();
        gain.gain.value = warningVolume;
        gain.connect(audio.destination);
        

        osc = gain.context.createOscillator();
        osc.frequency.value = warningFreq;
        osc.connect(gain);
        osc.onended = () => osc = null;
        
        
        osc2 = gain.context.createOscillator();
        osc2.frequency.value = warningFreq;
        osc2.connect(gain);
        osc2.onended = () => { osc2 = null; gain.disconnect(); gain = null; }
        
        osc.start();
        osc.stop(0.1);
        osc2.start(0.2);
        osc2.stop(0.3);
    }

    function stopSound() {
        if (osc !== null)
          osc.stop();
        if (osc2 !== null)
          osc2.stop();
        alarmSoundElement.pause();
    }

    function timeFormat(ms) {
        if (ms === undefined)
            return "--:--"
    
        const seconds = Math.round(Math.abs(ms) / 1000);
        let min = (Math.floor(seconds / 60)).toString();
        let sec = (seconds % 60).toString();
        min = min.length < 2 ? `0${min}` : min;
        sec = sec.length < 2 ? `0${sec}` : sec;
        
        return `${ms < 0 ? "- " : ""}${min}:${sec}`;
    }

    function updateClock() {
        const now = new Date();
        const elapsed = now - startTime;
        const left = totalTime * 60_000 - elapsed;
        
        currentTimeElement.innerHTML = timeFormat(elapsed);
        timeLeftElement.innerHTML = timeFormat(left);
    }

    function resetClock() {
        clearTimeout(clockTimer);
        
        currentTimeElement.innerHTML = timeFormat();
        timeLeftElement.innerHTML = timeFormat();
    }

    function reset() {
        stopSound();
        clearTimeout(alarmTimer);
        clearTimeout(warningTimer);
        clearTimeout(testAlarmTimer);
        
        resetClock();
        
        isPresentationRunning = false;
    }

    function startPresentation() {
        if (isPresentationRunning === true)
          return;
    
        startTime = new Date();
        totalTime = +totalTimeElement.value;
        const warningTime = +warningTimeElement.value;
        console.log(`Total time: ${totalTime}m\nWarning time: ${warningTime}m`);
        
        isPresentationRunning = true;
        
        warningTimer = setTimeout(shortPeep, warningTime * 60_000);
        alarmTimer = setTimeout(testAlarm, totalTime * 60_000);
        clockTimer = setInterval(updateClock, 1000);
    }

    function preset(time) {
        totalTimeElement.value = time;
        warningTimeElement.value = time-1;
    }
</script>

</html>
